#!/usr/bin/env python3
"""
Universal slide generator that can create presentations from any prompt
"""

import boto3
import json
import tempfile
import os
import re
from datetime import datetime
from typing import Dict, Any, List

try:
    from pptx import Presentation
    from pptx.util import Inches, Pt
    from pptx.enum.text import PP_ALIGN
    from pptx.dml.color import RGBColor
    from pptx.enum.shapes import MSO_SHAPE
    from pptx.chart.data import ChartData
    from pptx.enum.chart import XL_CHART_TYPE
    HAS_PPTX = True
except ImportError:
    HAS_PPTX = False

class UniversalSlideGenerator:
    def __init__(self):
        self.bedrock_runtime = boto3.client('bedrock-runtime')
        self.s3 = boto3.client('s3')
        self.output_bucket = 'scribbe-ai-dev-output'
        
    def generate_slide_from_prompt(self, user_prompt: str) -> Dict[str, Any]:
        """
        Generate a slide from any user prompt using Claude
        """
        # Use Claude to analyze the prompt and generate slide content
        analysis_prompt = f"""
        Analyze this user request and create a professional corporate slide:
        
        USER REQUEST: {user_prompt}
        
        Please provide a JSON response with the following structure:
        {{
            "title": "Slide title",
            "subtitle": "Optional subtitle",
            "slide_type": "chart|table|text|mixed",
            "content": {{
                "main_text": "Main content text",
                "bullets": ["bullet point 1", "bullet point 2"],
                "data": {{
                    "categories": ["Q1", "Q2", "Q3"],
                    "series": [
                        {{"name": "Series 1", "values": [100, 120, 150]}}
                    ]
                }}
            }},
            "charts": [
                {{
                    "type": "bar|line|pie|combo",
                    "title": "Chart title",
                    "data": {{
                        "categories": ["Cat1", "Cat2"],
                        "series": [{{"name": "Series", "values": [10, 20]}}]
                    }}
                }}
            ],
            "tables": [
                {{
                    "headers": ["Header1", "Header2"],
                    "rows": [["Data1", "Data2"]]
                }}
            ],
            "highlights": {{
                "title": "Highlights title",
                "items": ["highlight 1", "highlight 2"]
            }},
            "styling": {{
                "primary_color": "#C00000",
                "secondary_color": "#808080",
                "footer_text": "Company Name"
            }}
        }}
        
        Make sure to extract any numerical data, create appropriate visualizations, and maintain a professional corporate style.
        """
        
        try:
            response = self.bedrock_runtime.invoke_model(
                modelId='eu.anthropic.claude-3-5-sonnet-20240620-v1:0',
                contentType='application/json',
                accept='application/json',
                body=json.dumps({
                    'anthropic_version': 'bedrock-2023-05-31',
                    'messages': [{
                        'role': 'user',
                        'content': analysis_prompt
                    }],
                    'max_tokens': 4000,
                    'temperature': 0.3
                })
            )
            
            result = json.loads(response['body'].read())
            content_text = result['content'][0]['text']
            
            # Extract JSON from response
            json_match = re.search(r'\{.*\}', content_text, re.DOTALL)
            if json_match:
                slide_data = json.loads(json_match.group())
                return slide_data
            else:
                # Fallback to basic structure
                return self._create_fallback_structure(user_prompt)
                
        except Exception as e:
            print(f"Error generating content with Claude: {e}")
            return self._create_fallback_structure(user_prompt)
    
    def _create_fallback_structure(self, user_prompt: str) -> Dict[str, Any]:
        """Create a basic slide structure if Claude fails"""
        return {
            "title": "Generated Slide",
            "content": {
                "main_text": f"Content based on: {user_prompt}"
            },
            "styling": {
                "primary_color": "#C00000",
                "secondary_color": "#808080",
                "footer_text": "Generated by ScribbeAI"
            }
        }
    
    def create_powerpoint(self, slide_data: Dict[str, Any]) -> str:
        """Create PowerPoint presentation from slide data"""
        if not HAS_PPTX:
            raise Exception("python-pptx not available")
        
        # Create presentation
        prs = Presentation()
        slide_layout = prs.slide_layouts[5]  # Blank slide
        slide = prs.slides.add_slide(slide_layout)
        
        # Add title
        title = slide_data.get('title', 'Generated Slide')
        title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.3), Inches(8), Inches(0.6))
        title_frame = title_box.text_frame
        title_frame.text = title
        title_frame.paragraphs[0].font.name = "Arial"
        title_frame.paragraphs[0].font.size = Pt(24)
        title_frame.paragraphs[0].font.bold = True
        
        # Add subtitle if present
        subtitle = slide_data.get('subtitle')
        if subtitle:
            subtitle_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.9), Inches(8), Inches(0.4))
            subtitle_frame = subtitle_box.text_frame
            subtitle_frame.text = subtitle
            subtitle_frame.paragraphs[0].font.size = Pt(14)
        
        current_y = Inches(1.5)
        
        # Add charts
        charts = slide_data.get('charts', [])
        if charts:
            current_y = self._add_charts(slide, charts, current_y)
        
        # Add tables
        tables = slide_data.get('tables', [])
        if tables:
            current_y = self._add_tables(slide, tables, current_y)
        
        # Add main content
        content = slide_data.get('content', {})
        if content:
            current_y = self._add_content(slide, content, current_y)
        
        # Add highlights panel if present
        highlights = slide_data.get('highlights')
        if highlights:
            self._add_highlights_panel(slide, highlights)
        
        # Add footer
        styling = slide_data.get('styling', {})
        self._add_footer(slide, styling)
        
        return prs
    
    def _add_charts(self, slide, charts: List[Dict], start_y: Inches) -> Inches:
        """Add charts to slide"""
        for i, chart_spec in enumerate(charts):
            try:
                chart_type = chart_spec.get('type', 'bar')
                chart_title = chart_spec.get('title', 'Chart')
                chart_data_spec = chart_spec.get('data', {})
                
                # Position chart
                x = Inches(0.5)
                y = start_y + Inches(i * 3)
                width = Inches(6)
                height = Inches(2.5)
                
                # Create chart data
                chart_data = ChartData()
                categories = chart_data_spec.get('categories', [])
                chart_data.categories = categories
                
                series_list = chart_data_spec.get('series', [])
                for series in series_list:
                    chart_data.add_series(
                        series.get('name', ''), 
                        series.get('values', [])
                    )
                
                # Determine chart type
                xl_chart_type = XL_CHART_TYPE.COLUMN_CLUSTERED
                if chart_type == 'line':
                    xl_chart_type = XL_CHART_TYPE.LINE
                elif chart_type == 'pie':
                    xl_chart_type = XL_CHART_TYPE.PIE
                
                # Add chart
                chart = slide.shapes.add_chart(
                    xl_chart_type, x, y, width, height, chart_data
                ).chart
                
                chart.has_title = True
                chart.chart_title.text_frame.text = chart_title
                
            except Exception as e:
                print(f"Error adding chart: {e}")
                continue
        
        return start_y + Inches(len(charts) * 3)
    
    def _add_tables(self, slide, tables: List[Dict], start_y: Inches) -> Inches:
        """Add tables to slide"""
        for i, table_spec in enumerate(tables):
            try:
                headers = table_spec.get('headers', [])
                rows = table_spec.get('rows', [])
                
                if not headers or not rows:
                    continue
                
                # Position table
                x = Inches(0.5)
                y = start_y + Inches(i * 2.5)
                width = Inches(8)
                height = Inches(2)
                
                # Create table
                table = slide.shapes.add_table(
                    rows=len(rows) + 1,
                    cols=len(headers),
                    left=x, top=y, width=width, height=height
                ).table
                
                # Add headers
                for j, header in enumerate(headers):
                    cell = table.cell(0, j)
                    cell.text = str(header)
                    cell.fill.solid()
                    cell.fill.fore_color.rgb = RGBColor(68, 114, 196)
                    paragraph = cell.text_frame.paragraphs[0]
                    font = paragraph.font
                    font.bold = True
                    font.color.rgb = RGBColor(255, 255, 255)
                
                # Add data rows
                for i, row in enumerate(rows):
                    for j, value in enumerate(row):
                        if j < len(headers):
                            cell = table.cell(i + 1, j)
                            cell.text = str(value)
                            
            except Exception as e:
                print(f"Error adding table: {e}")
                continue
        
        return start_y + Inches(len(tables) * 2.5)
    
    def _add_content(self, slide, content: Dict, start_y: Inches) -> Inches:
        """Add text content to slide"""
        try:
            # Check if highlights panel exists (content goes on left side)
            has_highlights = 'highlights' in slide.shapes._spTree.getroot().attrib if hasattr(slide, 'highlights') else False
            
            width = Inches(5.5) if has_highlights else Inches(8)
            
            content_box = slide.shapes.add_textbox(
                Inches(0.5), start_y, width, Inches(3)
            )
            content_frame = content_box.text_frame
            content_frame.word_wrap = True
            
            # Add main text
            main_text = content.get('main_text', '')
            if main_text:
                content_frame.text = main_text
                content_frame.paragraphs[0].font.size = Pt(12)
            
            # Add bullets
            bullets = content.get('bullets', [])
            for bullet in bullets:
                p = content_frame.add_paragraph()
                p.text = f"• {bullet}"
                p.font.size = Pt(11)
                p.space_after = Pt(6)
            
            return start_y + Inches(3)
            
        except Exception as e:
            print(f"Error adding content: {e}")
            return start_y
    
    def _add_highlights_panel(self, slide, highlights: Dict):
        """Add highlights panel to right side of slide"""
        try:
            # Panel position (right side)
            x = Inches(6.3)
            y = Inches(1.2)
            width = Inches(3.5)
            height = Inches(4)
            
            # Background
            bg = slide.shapes.add_shape(
                MSO_SHAPE.RECTANGLE, x, y, width, height
            )
            bg.fill.solid()
            bg.fill.fore_color.rgb = RGBColor(245, 245, 245)
            bg.line.fill.background()
            
            # Content
            content_box = slide.shapes.add_textbox(
                x + Inches(0.1), y + Inches(0.1),
                width - Inches(0.2), height - Inches(0.2)
            )
            content_frame = content_box.text_frame
            content_frame.word_wrap = True
            
            # Title
            title = highlights.get('title', 'Highlights')
            content_frame.text = title
            content_frame.paragraphs[0].font.size = Pt(14)
            content_frame.paragraphs[0].font.bold = True
            content_frame.paragraphs[0].font.color.rgb = RGBColor(192, 0, 0)
            
            # Items
            items = highlights.get('items', [])
            for item in items:
                p = content_frame.add_paragraph()
                p.text = f"• {item}"
                p.font.size = Pt(10)
                p.space_after = Pt(6)
                
        except Exception as e:
            print(f"Error adding highlights panel: {e}")
    
    def _add_footer(self, slide, styling: Dict):
        """Add footer to slide"""
        try:
            # Footer bar
            footer_shape = slide.shapes.add_shape(
                MSO_SHAPE.RECTANGLE,
                Inches(0), Inches(6.8),
                Inches(10), Inches(0.4)
            )
            footer_shape.fill.solid()
            
            # Get color from styling
            secondary_color = styling.get('secondary_color', '#808080')
            if secondary_color.startswith('#'):
                r = int(secondary_color[1:3], 16)
                g = int(secondary_color[3:5], 16)
                b = int(secondary_color[5:7], 16)
                footer_shape.fill.fore_color.rgb = RGBColor(r, g, b)
            else:
                footer_shape.fill.fore_color.rgb = RGBColor(128, 128, 128)
            
            footer_shape.line.fill.background()
            
            # Footer text
            footer_text = styling.get('footer_text', 'Generated by ScribbeAI')
            text_box = slide.shapes.add_textbox(
                Inches(0.3), Inches(6.85),
                Inches(9.4), Inches(0.3)
            )
            text_frame = text_box.text_frame
            text_frame.text = footer_text
            text_frame.paragraphs[0].font.size = Pt(12)
            text_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
            
        except Exception as e:
            print(f"Error adding footer: {e}")
    
    def save_to_s3(self, presentation, slide_data: Dict[str, Any], user_prompt: str) -> str:
        """Save presentation and data to S3"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Save presentation
        with tempfile.NamedTemporaryFile(suffix='.pptx', delete=False) as tmp:
            presentation.save(tmp.name)
            
            pptx_key = f"generated_slides/slide_{timestamp}.pptx"
            
            with open(tmp.name, 'rb') as f:
                self.s3.put_object(
                    Bucket=self.output_bucket,
                    Key=pptx_key,
                    Body=f.read(),
                    ContentType='application/vnd.openxmlformats-officedocument.presentationml.presentation'
                )
            
            os.unlink(tmp.name)
        
        # Save metadata
        metadata = {
            "user_prompt": user_prompt,
            "slide_data": slide_data,
            "generated_at": datetime.now().isoformat(),
            "pptx_key": pptx_key
        }
        
        json_key = f"generated_slides/metadata_{timestamp}.json"
        self.s3.put_object(
            Bucket=self.output_bucket,
            Key=json_key,
            Body=json.dumps(metadata, indent=2),
            ContentType='application/json'
        )
        
        return pptx_key
    
    def generate_presigned_url(self, s3_key: str, expires_in: int = 3600) -> str:
        """Generate presigned URL for downloading"""
        return self.s3.generate_presigned_url(
            'get_object',
            Params={'Bucket': self.output_bucket, 'Key': s3_key},
            ExpiresIn=expires_in
        )

def main():
    """Main function to be called with user prompt"""
    import sys
    
    if len(sys.argv) < 2:
        print("Použitie: python universal_slide_generator.py \"tvoj prompt\"")
        sys.exit(1)
    
    user_prompt = " ".join(sys.argv[1:])
    
    print(f"🚀 Generujem slide z promptu: {user_prompt}")
    
    try:
        generator = UniversalSlideGenerator()
        
        # Generate slide content from prompt
        print("📝 Analyzujem prompt pomocou Claude...")
        slide_data = generator.generate_slide_from_prompt(user_prompt)
        
        # Create PowerPoint
        print("📊 Vytváram PowerPoint prezentáciu...")
        if HAS_PPTX:
            presentation = generator.create_powerpoint(slide_data)
            
            # Save to S3
            print("☁️ Ukladám do S3...")
            pptx_key = generator.save_to_s3(presentation, slide_data, user_prompt)
            
            # Generate download URL
            download_url = generator.generate_presigned_url(pptx_key)
            
            print(f"✅ Slide úspešne vytvorený!")
            print(f"   S3 bucket: {generator.output_bucket}")
            print(f"   Súbor: {pptx_key}")
            print(f"   URL: s3://{generator.output_bucket}/{pptx_key}")
            print(f"\n📥 Stiahnuť (platný 1 hodinu):")
            print(f"   {download_url}")
        else:
            print("❌ python-pptx nie je dostupný")
            
    except Exception as e:
        print(f"❌ Chyba: {str(e)}")

if __name__ == "__main__":
    main()